name: ci

on: [push, pull_request]

jobs:
  stable:
    strategy:
      matrix:
        os:
          # - ubuntu-latest
          - macos-latest
          # - macos-13
          - windows-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4

      - name: install
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: install on windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm https://cli.moonbitlang.com/install/powershell.ps1 | iex
          "C:\Users\runneradmin\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: moon version
        run: |
          moon version --all

      - name: moon install
        run: |
          moon update
          moon install

      - name: moon check
        run: moon check --target native --deny-warn

      - name: format diff
        run: |
          moon fmt --check

      - name: Setup MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run moon test (--target native)
        run: |
          moon test --target native

      - name: moon test --doc (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          _CL_: /link /LIBPATH:lib webview.lib /DEBUG
          PATH: lib;${{ env.PATH }}
        run: |
          moon test --target native --doc

      - name: moon test --doc (non-windows)
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          DYLD_LIBRARY_PATH: lib
        run: |
          moon test --target native --doc

      - name: moon build (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          _CL_: /link /LIBPATH:lib webview.lib /DEBUG
          PATH: lib;${{ env.PATH }}
        run: |
          moon build --target native

      - name: moon build (non-windows)
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          DYLD_LIBRARY_PATH: lib
        run: |
          moon build --target native

      - name: check exe size
        if: ${{ matrix.os != 'windows-latest' }}
        run: find ./target -name '*.exe' | xargs ls -lh

      - name: check core size on windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: Get-ChildItem -Path ".\target" -Recurse -Filter "*.exe" | ForEach-Object { "{0} ({1} bytes)" -f $_.FullName, $_.Length }

  bleeding:
    strategy:
      matrix:
        os:
          # - ubuntu-latest
          - macos-latest
          # - macos-13
          - windows-latest
    continue-on-error: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: install
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash -s bleeding
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: install on windows
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          MOONBIT_INSTALL_VERSION: bleeding
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm https://cli.moonbitlang.com/install/powershell.ps1 | iex
          "C:\Users\runneradmin\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: moon version
        run: |
          moon version --all

      - name: moon install
        run: |
          moon update
          moon install

      - name: Setup MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run moon test (--target native)
        run: |
          moon test --target native

      - name: moon test --doc (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          MOONBIT_INSTALL_VERSION: bleeding
          _CL_: /link /LIBPATH:lib webview.lib /DEBUG
          PATH: lib;${{ env.PATH }}
        run: |
          moon test --target native --doc

      - name: moon test --doc (non-windows)
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          DYLD_LIBRARY_PATH: lib
        run: |
          moon test --target native --doc

      - name: moon check
        run: moon check --target native --deny-warn

      - name: format diff
        run: |
          moon fmt --check

      - name: moon build (windows)
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          MOONBIT_INSTALL_VERSION: bleeding
          _CL_: /link /LIBPATH:lib webview.lib /DEBUG
          PATH: lib;${{ env.PATH }}
        run: |
          moon build --target native

      - name: moon build (non-windows)
        if: ${{ matrix.os != 'windows-latest' }}
        env:
          DYLD_LIBRARY_PATH: lib
        run: |
          moon build --target native

      - name: check exe size
        run: find ./target -name '*.exe' | xargs ls -lh
